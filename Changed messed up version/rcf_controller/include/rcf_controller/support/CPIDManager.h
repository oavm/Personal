/*
 * CPIDManager.h
 *
 *  Created on: Feb 17, 2015
 *      Author: victor
 */

#ifndef CPIDMANAGER_H_
#define CPIDMANAGER_H_

#include <Eigen/Dense>
#include <stdio.h>
#include <iostream>
#include <iit/rbd/rbd.h>
#include <iit/commons/dog/leg_data_map.h>
#include <iit/commons/dog/joint_id_declarations.h>

using namespace std;
using namespace iit;


typedef Eigen::Matrix<double, 12, 1> nJoints;
typedef Eigen::Matrix<double, 12, 3> jointsPID;
typedef Eigen::Matrix<double, 12, 12> matrix12x12;


class CPIDManager {
public:
    CPIDManager();
    virtual ~CPIDManager();
    /*
     * Update the status of each leg (stante or swing phase).
     * The convention is TRUE for stance phase.
     */
    void setLegStatus(const dog::LegDataMap<bool>& legStatus);
    /*
     * Set the PID gains to be used during the swing phase.
     * Set the PID gains for all the joints using a [n X m] matrix where
     * n=12 is number of joints and m=3 is the number of gains per joint.
     */
    //void setDefaultPIDGains(const Eigen::Matrix<double, 12, 3>& jointsGains);
    /*
     * Set the PID gains to be used during the swing phase.
     * Set the PID gains for one specific joint i (i = jointID).
     */
    void setDefaultJointPIDGains(const int& jointID,
                                 const double & kp,
                                 const double & ki,
                                 const double & kd);
    /*
     * Set the PID gains to be used during the swing phase.
     * Set the PID gains for one specific joint i (i = jointID).
     */
    void setStanceJointPIDGains(const int& jointID,
                                const double & kp,
                                const double & ki,
                                const double & kd);
    /*
     * Set the PID gains to be used during the stance phase.
     */
    void setStancePhasePIDGains(const jointsPID& jointGains);

    /*
     * Set actual joint states (positions and velocities).
     */
    void setJointStates(const nJoints& joint_pos, const nJoints& joint_vel);

    /*
     * Set desired joint states (positions and velocities).
     */
    void setJointDesiredStates(const nJoints& joint_des_pos, const nJoints& joint_des_vel, const nJoints& joint_des_acc);

    /*
     * Compute the torques needed to cancel the PID action computed by the motor servo.
     */
    void computeCompensatingTorques(void);

    /*
     * Enable/disable the PIDManager.
     * In case of disable the PIDManager outputs are zero.
     */
    void enablePIDManager(const bool& isEnable);

    /*
    * Enable/disable the PID modulation based on the position references
    * generated by the CPG-based trajectory generator.
    * Note: just when selecting Mode 2.
    */
    void enableCPGBasedSmoothPIDModulation(const bool& useCPGSmooth);

    /*
     * Set references from CPGs to be used for the PID modulation.
    */
    void setCPGPosReferences(const dog::LegDataMap<rbd::Vector3d>& CPGRefs);

    /*
     * Function overloading
    */
    void setCPGPosReferences(const rbd::Vector3d& CPGRefs_LF,
                             const rbd::Vector3d& CPGRefs_RF,
                             const rbd::Vector3d& CPGRefs_LH,
                             const rbd::Vector3d& CPGRefs_RH);

    /*
     * Set references from CPGs to be used for the PID modulation.
     */
    void setCPGVelReferences(const rbd::Vector3d& CPGRefs_LF,
                             const rbd::Vector3d& CPGRefs_RF,
                             const rbd::Vector3d& CPGRefs_LH,
                             const rbd::Vector3d& CPGRefs_RH);

    /*
     * Function overloading.
     */
    void setCPGVelReferences(const dog::LegDataMap<rbd::Vector3d>& CPGRefs);

    /*
     * Set the step height reference where the smoothing is suppose to end.
     */
    void setStepHeightThreshold(const double& stepHeight);

    /*
     * Get the step height reference where the smoothing is suppose to end.
     */
    double getStepHeightThreshold(void);

    /*
     * Set the smoothing gain.
     */
    void setSmoothingGain(const double& smoothingGain);

    /*
     * Get the smoothing gain.
     */
    double getSmoothingGain(void);

    /*
     * Set the inertia compensation gain (between 0 and 1).
     */
    void setInertiaCompensationGain(const double& gain);

    /*
     * Set the inertia (12x12) inertia matrix.
     */
    void setInertiaMatrix(const matrix12x12& iM);

    /*
     * Set the mode number based on the management logic.
     * Default modes are:
     * 1 - Output torques computed only based on the leg status (stance/swing);
     * 2 - Based on leg status and step cycle phase.
     */
    void setMode(const int& modeNumber);

    /*
     * Return the current PID Manager mode.
     */
    int getMode(void);


private:
    /*
     * Private function to compute joint output torque.
     * The computation algorithm depends on the computation mode.
    */
    double computeOutputTorque(const int& leg_joint);

    /*
     * Private function to smooth the impedance transition.
     */
    double sig(const double& arg);

    /*
     * Compute compensating torques only based on stance conditions.
     */
    void computeMode1(void);

    /*
     * Compute joint output torques based on stance conditions and step cycle phase.
     */
    void computeMode2(void);

    /*
     * Compute joint output torques based on stance conditions and foot vertical velocity.
     */
    void computeMode3(void);



public:
    nJoints outputTorques, tau_inertia_comp, inertialCompJointGain;
    jointsPID jointsStancePIDGains, jointsDefaultPIDGains;
    static const int Kp = 0;
    static const int Ki = 1;
    static const int Kd = 2;
    bool usePIDManager;
    enum {LF_HAA = 0, LF_HFE, LF_KFE,
          RF_HAA, RF_HFE, RF_KFE,
          LH_HAA, LH_HFE, LH_KFE,
          RH_HAA, RH_HFE, RH_KFE
         };

private:
    matrix12x12 inertiaMatrix_;
    int mode;
    bool useCPGsSmooth_;
    double stepHeightThreshold_, smoothingGain_, inertialCompGain_;
    dog::LegDataMap<bool> legStatus_;
    dog::LegDataMap<rbd::Vector3d> CPGPosRef_;
    dog::LegDataMap<rbd::Vector3d> CPGVelRef_;
    nJoints jointPos_, jointDesPos_, jointVel_, jointDesVel_, jointDesAcc_;

};

#endif /* CPIDMANAGER_H_ */
